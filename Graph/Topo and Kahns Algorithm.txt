// Topo Sort using DFS





// class Solution
// {
//     //Function to return list containing vertices in Topological order. 
//     static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
//     {
//         boolean vis[] = new boolean[V];
//         Stack<Integer> stk = new Stack<>();
//         for(int i = 0; i < V; i++) {
//             if(!vis[i])
//                 dfs(i, adj, vis, stk);
//         }
        
//         int ans[] = new int[stk.size()];
//         for(int i = 0; i < ans.length; i++) {
//             ans[i] = stk.pop();
//         }
//         return ans;
//     }
//     static void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean vis[], Stack<Integer> stk) {
//         vis[node] = true;
        
//         for(int idx : adj.get(node)) {
//             if(!vis[idx])
//                 dfs(idx, adj, vis, stk);
//         }
//         stk.push(node);
//     }
// }








// Topo Sort using BFS: Kahn's Algorithm

// Inderee: Number of incoming edges to a node is called Indegree.

class Solution
{
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int indegree[] = new int[V];
        for(int i = 0; i < V; i++) {
            for(int v : adj.get(i)) {
                indegree[v]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < V; i++) {
            if(indegree[i] == 0)
                q.add(i);
        }
        
        int topo[] = new int[V];
        int idx = 0;
        while(!q.isEmpty()) {
            int node = q.poll();
            topo[idx++] = node;
            
            for(int v : adj.get(node)) {
                indegree[v]--;
                if(indegree[v] == 0)
                    q.add(v);
            }
        }
        return topo;
    }
}
